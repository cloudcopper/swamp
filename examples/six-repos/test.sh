#!/bin/sh
set -ex

# WARNING: This file is by no any means an example how to run swamp
#          but script to utilize the example configuration (six-repos.yml),
#          and populate repositories for demo and test purpose only.
#          It will spawn the swamp in background and start the shell.
#          When the shell is exited, the swamp will be stopped.
#          In between it will populate repos with dummy artifacts.

TOP=$(dirname $(readlink -f $0))
SWAMP="${TOP}/../../swamp"
REPO_IDS="abc-gen1 abc-gen2 diplo triceratops jump receiver"

#
# Create input and storage locations for repos
#
for repoID in ${REPO_IDS}; do
  mkdir -p ${TOP}/input/${repoID}
  mkdir -p ${TOP}/storage/${repoID}
done

#
# Assume the swamp is prebuilt by make
#
[ -x ${SWAMP} ] || exit 1

#
# Start swamp in background
#
TOP="${TOP}" ${SWAMP} -repos="six-repos.yml" | tee swamp.log &
SWAMP_PID=$!
sleep 1
kill -0 ${SWAMP_PID} || exit 1

#
# Wait a bit for all to setup and populate repos
#
sleep 1
for repoID in ${REPO_IDS}; do
  # The repos input directiry should match the configuration
  INPUT="${TOP}/input/${repoID}"

  # The artifact can be added with explicit ID or with autogenerated.
  # The artifact may have artifact creation time as part of checksum.

  #
  # Create artifact with explicit ID
  #
  # ID can be arbitrary text you can use for directory creation
  ID="$(uuid)"

  # In the repo's input directory create the subdirectory with id
  mkdir -p "${INPUT}/${ID}"

  # create fake artifact data files
  dd if=/dev/urandom of="${INPUT}/${ID}/file1.bin" bs=4k count=32
  dd if=/dev/urandom of="${INPUT}/${ID}/file2.bin" bs=4k count=32
  dd if=/dev/urandom of="${INPUT}/${ID}/file3.bin" bs=4k count=32
  dd if=/dev/urandom of="${INPUT}/${ID}/file4.bin" bs=4k count=32
  # create artifact meta
  export > ${INPUT}/${ID}/export.txt
  # Create checksum file for artifacts
  # The name of checksum file must be equal to checksum of the file
  (cd ${INPUT}/${ID} && sha256sum * > _tmp.txt && mv _tmp.txt $(sha256sum _tmp.txt|cut -d' ' -f1).sha256sum)
  # Once the .sha256sum file is detected by swamp
  # It and all listed inside files will be processed as new artifact

  #
  # Create X artifacts with implicit artifact ID
  #
  for x in 1 2 3 4 5; do
    # Create Y uniq files
    # For debug purpose only those names will reflects repo id and iterations x and y
    for y in 1 2 3 4 5; do
      dd if=/dev/urandom of="${INPUT}/file-${repoID}-${x}-${y}.bin" bs=4k count=32
      (cd ${INPUT} && sha256sum file-${repoID}-${x}-${y}.bin >> checksum-${repoID}-${x}.txt)
    done
    # Set explicit artifact creation date
    date +%s > ${INPUT}/_createdAt.txt
    (cd ${INPUT} && sha256sum _createdAt.txt >> checksum-${repoID}-${x}.txt)
    (cd ${INPUT} && mv checksum-${repoID}-${x}.txt $(sha256sum checksum-${repoID}-${x}.txt|cut -d' ' -f1).sha256sum)
    # Now the swamp will process artifact

    # BUT! Once is has no explicitd artifact ID
    # and we going to reuse directory for next artifact
    # we have to ensure the _createdAt.txt is not overwritten
    # prior the artifact processing.
    # So lets wait until it removed by swamp.
    # If we would use explicit artifact id, that would be not needed
    X=0.1
    while [ -f ${INPUT}/_createdAt.txt ]; do echo "."; sleep $X; done
  done 
done

#
#
#
echo "Type 'exit' when complete and swamp would be terminated"
bash
kill -0 ${SWAMP_PID} && kill -15 ${SWAMP_PID}
while kill -0 ${SWAMP_PID} 2>/dev/null; do sleep 1; done